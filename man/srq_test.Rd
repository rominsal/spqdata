% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/srq_test.R
\name{srq_test}
\alias{srq_test}
\title{A function to calculate the global spatial runs test (SRQ)}
\usage{
srq_test(formula = NULL, data = NULL, na.action, xf = NULL,
listw = listw, alternative = "greater" , nsim = NULL, control = list())
}
\arguments{
\item{data}{an (optional) data frame or a sf object containing the variable to testing for.}

\item{xf}{un factor. vector de observaciones de la clase factor.}

\item{listw}{una lista de vecinos (tipo knn o nb) o una matrix W que indique el orden de cada $m_i-entorno$
(por ejemplo de inversa distancia). Para calcular el numero de rachas en cada m_i-entorno debe establecerse
un orden, por ejemplo del vecino más próximo al más lejano.}

\item{alternative}{a character string specifying the alternative hypothesis, must be one
of "two.sided", "greater" or "less" (default).}

\item{nsim}{Number of permutations to optain confidence intervals (CI).
Default value is NULL to don`t get CI of number of runs.}
}
\value{
decir que devuelve
  \tabular{ll}{
    \code{SR} \tab numero total de rachas \cr
    \code{dnr} \tab distribución empírica del numero de rachas \cr
    \code{SRQ} \tab Test de homogeneidad. Negative sign indicates global homogeneity \cr
    \code{p.valueSRQ} \tab p-value of the SRQ \cr
    \code{p.valueSRQB} \tab the pseudo p-value of the SRQ test\cr
    \code{MeanNeig} \tab Número medio de vecinos\cr
    \code{MaxNeig} \tab Número máximo de vecinos\cr
    \code{listw} \tab la lista de vecinos\cr
    \code{nsim} \tab numero de repeticiones\cr
    \code{SRGP} \tab vector con los 'nsim' valores de SRQ por remuestreo permutacional\cr
    \code{SRLP} \tab matrix con el número de rachas en cada localización para cada permutación\cr
    }
}
\description{
This function calculates the global spatial runs test for spatial independence of a categorical spatial data set.
}
\details{
El orden de las vecindades (m_i-entornos) es crítico.
El objeto listw puede ser de tres tipos:
  \tabular{ll}{
    \code{knn} \tab Un objeto tipo knn obtenida utilizando el criterio del vecino más próximo, obtenida por ejemplo con \code{\link{knearneigh}}\cr
    \code{nb} \tab Un objeto tipo nb obtenido con \code{\link{poly2nb}}\cr
    \code{matrix} \tab Una matriz indicando el orden de vecindad de cada m_i-entorno.
    Por ejemplo basada en inversa de la distancia con cierto punto de corte.\cr
    }
}
\examples{

# SRQ test based on knn
rm(list = ls())
N <- 1000
cx <- runif(N)
cy <- runif(N)
x <- cbind(cx,cy)
listw <- knearneigh(cbind(cx,cy), k=3)
p <- c(1/6,3/6,2/6)
rho <- 0.5
xf <- dgp_spq(x = x, p = p, listw = listw, rho = rho)
srq <- srq_test(xf = xf, listw = listw)
srq$SRQ
plot.srq(srq)

# Fastfood example. sf (points)
data("FastFood")
x <- cbind(FastFood.sf$Lon,FastFood.sf$Lat)
listw <- spdep::knearneigh(x, k=4)
formula <- ~ Type
srq <- srq_test(formula = formula, data = FastFood.sf, listw = listw)
srq$SRQ
plot.srq(srq)

# With a sf object (poligons)
library(sf)
fname <- system.file("shape/nc.shp", package="sf")
nc <- st_read(fname)
listw <- spdep::poly2nb(as(nc,"Spatial"), queen = FALSE)
p <- c(1/6,3/6,2/6)
rho = 0.5
co <- sf::st_coordinates(st_centroid(nc))
nc$xf <- dgp_spq(x = co, p = p, listw = listw, rho = rho)
plot(nc["xf"])
formula <- ~ xf
srq <- srq_test(formula = formula, data = nc, listw = listw, nsim=399)
c(srq$SRQ,srq$p.valueSRQ,srq$p.valueSRQB)
plot.srq(srq)

# With a sf object (poligons) WITH ZEROS
data(Spain)
listw <- spdep::poly2nb(spain.sf, queen = FALSE)
listw <- nb2nb_order(listw,spain.sf)

# SRQ test based on inverse distance
rm(list = ls())
N <- 500
cx <- runif(N)
cy <- runif(N)
x <-cbind(cx,cy)
xx <- as.data.frame(cbind(cx,cy))
xx <- st_as_sf(xx,coords = c("cx","cy"))
n = dim(xx)[1]
dis <- 1/matrix(as.numeric(st_distance(xx,xx)),ncol=n,nrow=n)
diag(dis) <- 0
dis <- (dis < quantile(dis,.05))*dis
rowSums(dis>0)
p <- c(1/6,3/6,2/6)
rho <- 0.5
xf <- dgp_spq(x = x, p = p, listw = dis, rho = rho)
srq <- srq_test(xf = xf, listw = dis)
srq$SRQ
plot.srq(srq)

data("FastFood")
n = dim(FastFood.sf)[1]
dis <- 1000000/matrix(as.numeric(st_distance(FastFood.sf,FastFood.sf)),ncol=n,nrow=n)
diag(dis) <- 0
dis <- (dis < quantile(dis,.005))*dis
p <- c(1/6,3/6,2/6)
rho = 0.5
co <- sf::st_coordinates(st_centroid(FastFood.sf))
FastFood.sf$xf <- dgp_spq(x = co, p = p, listw = dis, rho = rho)
plot(FastFood.sf["xf"])
formula <- ~ xf
srq <- srq_test(formula = formula, data = FastFood.sf, listw = dis)
srq$SRQ
plot.srq(srq)


# SRQ test based on inverse distance
data("FastFood")
n = dim(FastFood.sf)[1]
dis <- 1000000/matrix(as.numeric(st_distance(FastFood.sf,FastFood.sf)),ncol=n,nrow=n)
diag(dis) <- 0
dis <- (dis < quantile(dis,.005))*dis
formula <- ~ Type
srq <- srq_test(formula = formula, data = FastFood.sf, listw = dis)
srq$SRQ
plot.srq(srq)


}
\seealso{
\code{\link{dgp_spq}}
}
\author{
\tabular{ll}{
  Fernando López  \tab \email{fernando.lopez@upct.es} \cr
  Román Mínguez  \tab \email{roman.minguez@uclm.es} \cr
  Antonio Páez \tab \email{paez@gmail.com} \cr
  Manuel Ruiz \tab \email{manuel.ruiz@upct.es} \cr
  }
  @references
  \itemize{
    \item Ruiz, M., López, F., and Páez, A. (2010).
    A test for global and local homogeneity of categorical data based on spatial runs.
      \emph{Geographical Analysis}.
  }
}
\keyword{association,}
\keyword{qualitative}
\keyword{runs}
\keyword{spatial}
\keyword{test}
\keyword{variable,}
